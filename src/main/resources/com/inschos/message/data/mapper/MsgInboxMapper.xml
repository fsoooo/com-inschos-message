<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- 命名空间，对sql进行分类化管理（sql隔离） -->
<mapper namespace="com.inschos.message.data.mapper.MsgInboxMapper">
    <!-- 在映射文件中配置sql语句 -->
    <!-- 通过select执行查询，id用于标识映射文件中的sql(Statement-id)
    将sql语句封装到mappedstatement中
    #{}表示占位符
    parameterType-指定输入参数的类型
    #{id}-id表示输入的参数，参数名称就是id,如如果输入参数是简单类型，#{}中的参数可以任意
    resultType-指定sql输出结果所映射的java对象类型
    -->
    <sql id="Base_Column_List">
        `id`,`name`
    </sql>

    <insert id="getMsgRecList" parameterType="MsgRec">
        insert into  demo(`name`)
        values(#{name})
    </insert>

    <insert id="getMsgSysALL" parameterType="String">
        insert into  demo(`name`)
        values(#{name})
    </insert>

    <update id="getMsgInfo" parameterType="Message">
        update demo set
          `name`=#{name}
        where `id`=#{id}
    </update>

    <!-- resultType-指定单条记录所映射的对象类型
    ${}拼接sql串，接收参数的内容，不加任何修饰，拼接在sql中(存在sql漏洞)
    ${}接收输入参数的内容，如果传入的类型是简单类型，${}中只能使用value
    -->
    <select id="updateMsgRec" parameterType="long" resultType="int">
        select
        <include refid="Base_Column_List"/>
        from  demo
        where `id`=#{id}
    </select>

</mapper>