<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- 命名空间，对sql进行分类化管理（sql隔离） -->
<mapper namespace="com.inschos.message.data.mapper.MsgModelMapper">
    <!-- 在映射文件中配置sql语句 -->
    <!-- 通过select执行查询，id用于标识映射文件中的sql(Statement-id)
    将sql语句封装到mappedstatement中
    #{}表示占位符，#{id}-id表示输入的参数，参数名称就是id,如如果输入参数是简单类型，#{}中的参数可以任意
    ${}拼接sql串，接收参数的内容，不加任何修饰，拼接在sql中(存在sql漏洞)
    ${}接收输入参数的内容，如果传入的类型是简单类型，${}中只能使用value
    parameterType-指定输入参数的类型
    resultType-指定sql输出结果所映射的java对象类型-->

    <!--msg_model表查询字段-->
    <sql id="Base_Column_List">
        `id`,`model_code`,`model_name`,`model_content`,`model_type`,`created_user`,`created_user_type`,`status`,`state`,`created_at`,`updated_at`
    </sql>


    <insert id="addMsgModel" parameterType="MsgModel">
        insert into  msg_model(`model_code`,`model_name`,`model_content`,`model_type`,`created_user`,`created_user_type`,`status`,`state`,`created_at`,`updated_at`)
        values(#{model_code},#{model_name},#{model_content},#{model_type},#{created_user},#{created_user_type},#{status},#{state},#{created_at},#{updated_at})
    </insert>


    <select id="findMsgModelRepeat" parameterType="MsgModel" resultType="MsgModel">
        select  `id`
        from msg_model
        where `model_name`=#{model_name}
        limit 1
    </select>


    <select id="findMsgModelList" parameterType="MsgModelList" resultType="MsgModel">
        select
        `id`,`model_code`,`model_name`,`model_type`
        from msg_model
        <where>
            <choose>
                <when test="page.lastId>0">
                    id&gt;#{page.lastId}
                </when>
                <when test="page.start>0">
                    id&gt;=(
                    select
                    id
                    from msg_model
                    where status=#{msgModel.status}
                    AND model_type = #{msgModel.model_type}
                    AND state=1
                    limit #{page.start},1
                    )
                </when>
                <otherwise>
                    1=1
                </otherwise>
            </choose>
            AND status = #{msgModel.status} AND model_type = #{msgModel.model_type} AND state = 1
            limit #{page.offset}
        </where>
    </select>


    <select id="findMsgModelInfo" parameterType="MsgModel" resultType="MsgModel">
        select
        <include refid="Base_Column_List"/>
        from msg_model
        where `model_code`=#{model_code}
    </select>


    <update id="updateMsgModel" parameterType="MsgModelUpdate">
     update msg_model set
              `status`=#{status} AND `model_type` =#{model_type}
            where `model_code`=#{model_code}
    </update>


    <update id="updateMsgModelStatus" parameterType="MsgModelUpdate">
     update msg_model set
              `status`=#{status}
            where `model_code`=#{model_code}
    </update>


    <update id="updateMsgModelType" parameterType="MsgModelUpdate">
     update msg_model set
              `model_type` =#{model_type}
            where `model_code`=#{model_code}
    </update>
</mapper>